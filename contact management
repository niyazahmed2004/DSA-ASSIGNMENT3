#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char name[50];
    struct Node* next;
};

void createList(struct Node** head, int n);
void insertContact(struct Node** head, char* name, int position);
void deleteContact(struct Node** head, char* key, char mode);
void displayList(struct Node* head);
void searchContact(struct Node* head, char* name);

int main() {
    struct Node* head = NULL;
    int choice, n, position;
    char name[50];
    char mode;

    while (1) {
        printf("\n1. Create the list of contacts\n");
        printf("2. Insert a new contact\n");
        printf("3. Delete a contact\n");
        printf("4. Display contact list\n");
        printf("5. Search for a contact\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of contacts: ");
                scanf("%d", &n);
                createList(&head, n);
                break;
            case 2:
                printf("Enter the contact's name to insert: ");
                scanf("%s", name);
                printf("Enter the position (0-based index) to insert the contact: ");
                scanf("%d", &position);
                insertContact(&head, name, position);
                break;
            case 3:
                printf("Delete by name or position? (n/p): ");
                scanf(" %c", &mode);
                if (mode == 'n') {
                    printf("Enter the contact's name to delete: ");
                    scanf("%s", name);
                } else if (mode == 'p') {
                    printf("Enter the position to delete: ");
                    scanf("%d", &position);
                }
                deleteContact(&head, name, mode);
                break;
            case 4:
                displayList(head);
                break;
            case 5:
                printf("Enter the contact's name to search: ");
                scanf("%s", name);
                searchContact(head, name);
                break;
            case 6:
                printf("Exiting the program...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void createList(struct Node** head, int n) {
    struct Node* newNode, *temp;
    char name[50];

    for (int i = 0; i < n; i++) {
        newNode = (struct Node*)malloc(sizeof(struct Node));
        if (newNode == NULL) {
            printf("Memory allocation failed\n");
            return;
        }
        printf("Enter contact name %d: ", i + 1);
        scanf("%s", newNode->name);
        newNode->next = NULL;

        if (*head == NULL) {
            *head = newNode;
        } else {
            temp = *head;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    displayList(*head);
}

void insertContact(struct Node** head, char* name, int position) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    strcpy(newNode->name, name);
    newNode->next = NULL;

    if (position == 0) {
        newNode->next = *head;
        *head = newNode;
    } else {
        struct Node* temp = *head;
        for (int i = 0; i < position - 1 && temp != NULL; i++) {
            temp = temp->next;
        }
        if (temp != NULL) {
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            printf("Position out of range\n");
            free(newNode);
            return;
        }
    }
    displayList(*head);
}

void deleteContact(struct Node** head, char* key, char mode) {
    struct Node *temp = *head, *prev = NULL;

    if (mode == 'n') {
        while (temp != NULL && strcmp(temp->name, key) != 0) {
            prev = temp;
            temp = temp->next;
        }
        if (temp == NULL) {
            printf("Contact not found\n");
            return;
        }
    } else if (mode == 'p') {
        int position = atoi(key);
        if (position == 0 && *head != NULL) {
            temp = *head;
        } else {
            for (int i = 0; i < position && temp != NULL; i++) {
                prev = temp;
                temp = temp->next;
            }
            if (temp == NULL) {
                printf("Position out of range\n");
                return;
            }
        }
    }

    if (prev == NULL) {
        *head = temp->next;
    } else {
        prev->next = temp->next;
    }
    free(temp);
    displayList(*head);
}

void displayList(struct Node* head) {
    struct Node* temp = head;
    if (head == NULL) {
        printf("Contact list is empty.\n");
        return;
    }
    printf("Contact list: ");
    while (temp != NULL) {
        printf("%s -> ", temp->name);
        temp = temp->next;
    }
    printf("NULL\n");
}

void searchContact(struct Node* head, char* name) {
    struct Node* temp = head;
    int position = 0;
    while (temp != NULL) {
        if (strcmp(temp->name, name) == 0) {
            printf("%s found at position %d\n", name, position);
            return;
        }
        position++;
        temp = temp->next;
    }
    printf("%s not found in the contact list.\n", name);
}
